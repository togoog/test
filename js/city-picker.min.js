// jshint ignore: start
function(e){
    //开发时，直接把数据库数据设置给rawCitiesData，注意，这里要转json对象，不是json字符串。
    e.rawCitiesData = [{
        name: "北京",
        code: "110000",
        sub: [{
            name: "北京市",
            code: "110000",
            sub: [{
                name: "东城区",
                code: "110101"
            }]
        }]
    }]
}()
function(e) {
    "use strict";
    var n, a = e.rawCitiesData,
    c = function(e) {
        for (var n = [], a = 0; a < e.length; a++) {
            var c = e[a];
            //注意，这里过滤条件，比如：北京是的二级是市辖区，如果不把'市辖区'这个条件去掉，那么，市辖区下的所有去就没有了。
            /^请选择|市辖区/.test(c.name) || n.push(c)
        }
        return n.length ? n: []
    },
    o = function(e) {
        return e.sub ? c(e.sub) : [{
            name: "",
            code: e.code
        }]
    },
    m = function(e) {
        for (var n = 0; n < a.length; n++) if (a[n].code === e || a[n].name === e) return o(a[n]);
        return []
    },
    d = function(e, n) {
        for (var c = 0; c < a.length; c++) if (a[c].code === e || a[c].name === e) for (var m = 0; m < a[c].sub.length; m++) if (a[c].sub[m].code === n || a[c].sub[m].name === n) return o(a[c].sub[m])
    },
    u = function(e) {
        var n, c, o = a[0],
        m = e.split(" ");
        return a.map(function(e) {
            e.name === m[0] && (o = e)
        }),
        o.sub.map(function(e) {
            e.name === m[1] && (n = e)
        }),
        m[2] && n.sub.map(function(e) {
            e.name === m[2] && (c = e)
        }),
        c ? [o.code, n.code, c.code] : [o.code, n.code]
    };
    e.fn.cityPicker = function(c) {
        return c = e.extend({},
        n, c),
        this.each(function() {
            var n = this,
            s = a.map(function(e) {
                return e.name
            }),
            b = a.map(function(e) {
                return e.code
            }),
            t = o(a[0]),
            r = t.map(function(e) {
                return e.name
            }),
            i = t.map(function(e) {
                return e.code
            }),
            l = o(a[0].sub[0]),
            f = l.map(function(e) {
                return e.name
            }),
            p = l.map(function(e) {
                return e.code
            }),
            v = s[0],
            h = r[0],
            V = f[0],
            y = [{
                displayValues: s,
                values: b,
                cssClass: "col-province"
            },
            {
                displayValues: r,
                values: i,
                cssClass: "col-city"
            }];
            c.showDistrict && y.push({
                values: p,
                displayValues: f,
                cssClass: "col-district"
            });
            var g = {
                cssClass: "city-picker",
                rotateEffect: !1,
                formatValue: function(e, n, a) {
                    return a.join(" ")
                },
                onChange: function(a, o, u) {
                    var s, b = a.cols[0].displayValue;
                    if (b !== v) {
                        var t = m(b);
                        s = t[0].name;
                        var r = d(b, s);
                        return a.cols[1].replaceValues(t.map(function(e) {
                            return e.code
                        }), t.map(function(e) {
                            return e.name
                        })),
                        c.showDistrict && a.cols[2].replaceValues(r.map(function(e) {
                            return e.code
                        }), r.map(function(e) {
                            return e.name
                        })),
                        v = b,
                        h = s,
                        a.updateValue(),
                        !1
                    }
                    if (c.showDistrict && (s = a.cols[1].displayValue, s !== h)) {
                        var i = d(b, s);
                        return a.cols[2].replaceValues(i.map(function(e) {
                            return e.code
                        }), i.map(function(e) {
                            return e.name
                        })),
                        h = s,
                        a.updateValue(),
                        !1
                    }
                    e(n).attr("data-code", o[o.length - 1]),
                    e(n).attr("data-codes", o.join(",")),
                    c.onChange && c.onChange.call(n, a, o, u)
                },
                cols: y
            };
            if (this) {
                var C = e.extend({},
                c, g),
                w = e(this).val();
                //注意，这里是默认显示第一个省的三级联动，而且是必须的，如果匹配不到，会报错二级联动没有被定义（坑！）
                //这个'北京 北京市 东城区'条件改成：自己数据库中的第一个省的三级联动名称即可，比如你想要把北京显示在默认上（当然，最好是json数组对象的第一个省）
                //替换下面的判断条件：北京市 市辖区 东城区（判断条件要与默认显示的数据一致，不然回报错，并且，默认的条件也要和动态的数据一致）
                var defaultDatas = "北京市 市辖区 东城区";//初始化默认的显示数据
                if($("#ds").val()){//回显的数据--数据库的数据
                    defaultDatas = $("#ds").val();
                }
                if (w || (w = defaultDatas), v = w.split(" ")[0], h = w.split(" ")[1], V = w.split(" ")[2], w) {
                    if (C.value = u(w), C.value[0]) {
                        var D = m(C.value[0]);
                        C.cols[1].values = D.map(function(e) {
                            return e.code
                        }),
                        C.cols[1].displayValues = D.map(function(e) {
                            return e.name
                        })
                    }
                    if (C.value[1]) {
                        if (c.showDistrict) {
                            var k = d(C.value[0], C.value[1]);
                            C.cols[2].values = k.map(function(e) {
                                return e.code
                            }),
                            C.cols[2].displayValues = k.map(function(e) {
                                return e.name
                            })
                        }
                    } else if (c.showDistrict) {
                        var k = d(C.value[0], C.cols[1].values[0]);
                        C.cols[2].values = k.map(function(e) {
                            return e.code
                        }),
                        C.cols[2].displayValues = k.map(function(e) {
                            return e.name
                        })
                    }
                }
                e(this).picker(C)
            }
        })
    },
    n = e.fn.cityPicker.prototype.defaults = {
        showDistrict: !0
    }
} ($);